(* ------------------------------------------------------------------------------------------ *)
(* --------------------FONCTIONS (ET CURIFICATION)------------------------ *)
(* ------------------------------------------------------------------------------------------ *)

let f x = 2* x ;;
f 5 ;;
f 5 + 10 ;;
f (5 + 10) ;;

(* Curryfication !! Permet d'accéder à des fonctions intermédiaires *) 
	(* de : *)
		let f (x,y) = 2 * x + 3 * y ;;
	(* à : *)
		let f x y = 2 * x + 3 * y ;; 
f 3 ;;
f 3 2 ;;

let evalue u x = u x ;;
let h x = x * x + 1 ;;
h 5 ;;
evalue h 10 ;;

(* ------------------------------------------------------------------------------------------ *)
(* --------------------------------COMPOSITION------------------------------------- *)
(* ------------------------------------------------------------------------------------------ *)

let compose u v x = u (v x) ;;
let f x = x + 1 ;;
let g x = x * x ;;
let h = compose f g ;;
h 12 ;;
let k = compose g f ;;
k 12 ;;
f (g 5) ;;

(* ------------------------------------------------------------------------------------------ *)
(* -----------------AFFICHAGE D'UNE VALEUR---------------------------------- *)
(* ------------------------------------------------------------------------------------------ *)

print_string "Hello, world !\n" ;;
print_int (4+1) ;
print_newline () ;;

let g x =
	print_int (x * x);
	print_newline () ;;
g 5 ;;

(* ------------------------------------------------------------------------------------------ *)
(* ------------RÉFÉRENCE, BOUCLES ET TESTS---------------------------- *)
(* ------------------------------------------------------------------------------------------ *)

(* Références *)
let x = ref valeur;
x := expr ;;
!x ;;

(* Boucles *)
for compteur = debut to fin do expr done
while (condition) do expr done

(* Tests *)
if (condition) then expr_1 else expr_2

(* ------------------------------------------------------------------------------------------ *)
(* ---------------------------------EXEMPLES----------------------------------------- *)
(* ------------------------------------------------------------------------------------------ *)

(* Fonction valeur absolue *)
let abs x =
	if x >= 0 then x
	else -x
;;
abs (-3) ;;

(* Fonction factoriel *)
...

(* Suite définie par réccurence *)
let u n =
	let t = ref 0. in
		for k = 1 to n do
			t := 1. /. (1. +. !t)
		done ;
		!t
;;
u 20 ;;

(* Suite de Syracuse *)
let syracuse s =
	let u = ref s in
		while !u <> 1 do
			print_int !u ;
			print_string " " ;
...
